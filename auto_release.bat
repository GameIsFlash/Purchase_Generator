@echo off
chcp 65001 >nul
setlocal enabledelayedexpansion

echo.
echo ========================================
echo    –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –†–ï–õ–ò–ó PACKAGEGENERATOR
echo ========================================
echo.

REM --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
set REPO_PATH=C:\Dev\Purchase_generator_final
set GITHUB_USER=GameIsFlash
set GITHUB_REPO=Purchase_Generator
set GITHUB_URL=https://github.com/GameIsFlash/Purchase_Generator.git
set VENV_PATH=C:\Dev\Purchase_generator_final\.venv

REM --- –ü–†–û–í–ï–†–ö–ê VIRTUAL ENVIRONMENT ---
echo –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...
if exist "!VENV_PATH!\Scripts\activate.bat" (
    echo –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...
    call "!VENV_PATH!\Scripts\activate.bat"
    echo –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ
) else (
    echo –í–ù–ò–ú–ê–ù–ò–ï: –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø—É—Ç–∏: !VENV_PATH!
    echo –£–±–µ–¥–∏—Å—å —á—Ç–æ PyInstaller —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ
)

REM --- –ü–†–û–í–ï–†–ö–ê GIT –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø ---
echo –ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...
git status >nul 2>&1
if !errorlevel! neq 0 (
    echo –û–®–ò–ë–ö–ê: –≠—Ç–æ –Ω–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!
    echo –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Git...
    git init
    git add .
    git commit -m "Initial commit"
)

REM --- –ü–†–û–í–ï–†–ö–ê REMOTE ORIGIN ---
echo –ü—Ä–æ–≤–µ—Ä–∫–∞ remote origin...
git remote get-url origin >nul 2>&1
if !errorlevel! neq 0 (
    echo Remote origin –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.
    echo –î–æ–±–∞–≤–ª—è–µ–º origin: !GITHUB_URL!
    git remote add origin "!GITHUB_URL!"
)

REM --- –°–û–ó–î–ê–ï–ú –í–†–ï–ú–ï–ù–ù–´–ï PYTHON –°–ö–†–ò–ü–¢–´ –î–õ–Ø –ß–¢–ï–ù–ò–Ø –í–ï–†–°–ò–ò ---
echo import re > get_version.py
echo content = open('main.py', 'r', encoding='utf-8').read() >> get_version.py
echo match = re.search(r'CURRENT_VERSION\s*=\s*["'']([0-9.]+)["'']', content) >> get_version.py
echo if match: >> get_version.py
echo     print(match.group(1)) >> get_version.py
echo else: >> get_version.py
echo     print('0.0.0') >> get_version.py

REM --- –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–ö–£–©–ï–ô –í–ï–†–°–ò–ò ---
echo –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏...
python get_version.py > temp_version.txt
set /p CURRENT_VERSION=<temp_version.txt
del get_version.py
del temp_version.txt

if "!CURRENT_VERSION!"=="0.0.0" (
    echo –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ CURRENT_VERSION –≤ main.py
    echo –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –≤–µ—Ä—Å–∏—é 1.0.0
    set CURRENT_VERSION=1.0.0
    set NEW_VERSION=1.0.0
    set FIRST_RELEASE=1
) else (
    echo –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: !CURRENT_VERSION!
    echo.

    REM --- –†–ê–ó–ë–ò–ï–ù–ò–ï –í–ï–†–°–ò–ò –ù–ê –ß–ê–°–¢–ò ---
    for /f "tokens=1,2,3 delims=." %%a in ("!CURRENT_VERSION!") do (
        set MAJOR=%%a
        set MINOR=%%b
        set PATCH=%%c
    )

    REM --- –ó–ê–ü–†–û–° –ù–û–í–û–ô –í–ï–†–°–ò–ò ---
    set /p VERSION_TYPE="–í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (1 - patch, 2 - minor, 3 - major): "

    if "!VERSION_TYPE!"=="1" (
        set /a NEW_PATCH=!PATCH!+1
        set NEW_VERSION=!MAJOR!.!MINOR!.!NEW_PATCH!
    ) else if "!VERSION_TYPE!"=="2" (
        set /a NEW_MINOR=!MINOR!+1
        set NEW_VERSION=!MAJOR!.!NEW_MINOR!.0
    ) else if "!VERSION_TYPE!"=="3" (
        set /a NEW_MAJOR=!MAJOR!+1
        set NEW_VERSION=!NEW_MAJOR!.0.0
    ) else (
        echo –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!
        pause
        exit /b 1
    )

    set /p CONFIRM="–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±—É–¥–µ—Ç: !NEW_VERSION!. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): "
    if /i not "!CONFIRM!"=="y" (
        echo –û—Ç–º–µ–Ω–µ–Ω–æ.
        pause
        exit /b 1
    )
)

echo.
echo üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–ª–∏–∑–∞ v!NEW_VERSION!...
echo.

REM --- –°–û–ó–î–ê–ï–ú –°–ö–†–ò–ü–¢ –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø main.py ---
echo import re > update_main.py
echo content = open('main.py', 'r', encoding='utf-8').read() >> update_main.py
echo new_version = "!NEW_VERSION!" >> update_main.py
echo new_content = re.sub(r'CURRENT_VERSION\s*=\s*["'']([0-9.]+)["'']', 'CURRENT_VERSION = "' + new_version + '"', content) >> update_main.py
echo open('main.py', 'w', encoding='utf-8').write(new_content) >> update_main.py

REM --- –°–û–ó–î–ê–ï–ú –°–ö–†–ò–ü–¢ –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø create_installer.iss ---
echo import re > update_iss.py
echo content = open('create_installer.iss', 'r', encoding='utf-8').read() >> update_iss.py
echo new_version = "!NEW_VERSION!" >> update_iss.py
echo content = re.sub(r'AppVersion=[0-9.]+', 'AppVersion=' + new_version, content) >> update_iss.py
echo content = re.sub(r'VersionInfoVersion=[0-9.]+', 'VersionInfoVersion=' + new_version, content) >> update_iss.py
echo open('create_installer.iss', 'w', encoding='utf-8').write(content) >> update_iss.py

REM --- –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–ï–†–°–ò–ò –í –§–ê–ô–õ–ê–• ---
echo –®–∞–≥ 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ —Ñ–∞–π–ª–∞—Ö...

echo –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ main.py...
python update_main.py
if !errorlevel! neq 0 (
    echo –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ main.py
    pause
    exit /b 1
)

echo –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ create_installer.iss...
python update_iss.py
if !errorlevel! neq 0 (
    echo –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ create_installer.iss
    pause
    exit /b 1
)

del update_main.py
del update_iss.py

REM --- –ß–¢–ï–ù–ò–ï –û–ü–ò–°–ê–ù–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø ---
echo –®–∞–≥ 2: –ß—Ç–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...

if exist "update_description.txt" (
    echo –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª update_description.txt
    copy update_description.txt changelog_temp.txt >nul
) else (
    echo –§–∞–π–ª update_description.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    echo. > changelog_temp.txt
)

REM --- –ö–û–ú–ú–ò–¢ –ò –ü–£–® –ù–ê GITHUB ---
echo –®–∞–≥ 3: –ö–æ–º–º–∏—Ç –∏ –ø—É—à –Ω–∞ GitHub...

git add .
git commit -m "üöÄ Release v!NEW_VERSION!"

echo –ü—É—à –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...
git push -u origin master

if !errorlevel! neq 0 (
    echo –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—à–∏—Ç—å –≤ GitHub
    echo –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–±–æ—Ä–∫—É –±–µ–∑ –ø—É—à–∞ –Ω–∞ GitHub...
    set GIT_ERROR=1
)

REM --- –°–ë–û–†–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
echo –®–∞–≥ 4: –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...

echo –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ—Ä–æ–∫...
if exist "build" rmdir /s /q "build"
if exist "dist" rmdir /s /q "dist"

echo –ü—Ä–æ–≤–µ—Ä–∫–∞ PyInstaller...
pyinstaller --version >nul 2>&1
if !errorlevel! neq 0 (
    echo –û–®–ò–ë–ö–ê: PyInstaller –Ω–µ –Ω–∞–π–¥–µ–Ω!
    echo.
    echo –£—Å—Ç–∞–Ω–æ–≤–∏ PyInstaller: pip install pyinstaller
    echo –ò–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
    echo.
    pause
    exit /b 1
)

echo –°–±–æ—Ä–∫–∞ EXE —á–µ—Ä–µ–∑ PyInstaller...
pyinstaller PurchaseGenerator.spec
if !errorlevel! neq 0 (
    echo –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ EXE
    pause
    exit /b 1
)

echo –°–±–æ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ —á–µ—Ä–µ–∑ Inno Setup...
"C:\Program Files (x86)\Inno Setup 6\ISCC.exe" create_installer.iss
if !errorlevel! neq 0 (
    echo –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞
    pause
    exit /b 1
)

REM --- –ü–û–î–ü–ò–°–´–í–ê–ù–ò–ï –§–ê–ô–õ–û–í ---
echo –®–∞–≥ 5: –ü–æ–¥–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...

set SIGNTOOL_PATH=C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe
if exist "!SIGNTOOL_PATH!" (
    echo –ü–æ–¥–ø–∏—Å—ã–≤–∞–Ω–∏–µ EXE...
    "!SIGNTOOL_PATH!" sign /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 /v "dist\PurchaseGenerator\PurchaseGenerator.exe"

    echo –ü–æ–¥–ø–∏—Å—ã–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞...
    "!SIGNTOOL_PATH!" sign /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 /v "Output\PackageGeneratorApp_Setup.exe"
) else (
    echo Windows SDK –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–ø–∏—Å—ã–≤–∞–Ω–∏–µ.
)

REM --- –°–û–ó–î–ê–ù–ò–ï –†–ï–õ–ò–ó–ê –ù–ê GITHUB ---
echo –®–∞–≥ 6: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –Ω–∞ GitHub...

if defined GIT_ERROR (
    echo –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ Git
) else (
    echo –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞...
    echo # Release v!NEW_VERSION! > changelog.md
    echo. >> changelog.md
    echo ## –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏: >> changelog.md
    echo. >> changelog.md

    REM --- –î–û–ë–ê–í–õ–Ø–ï–ú –û–ü–ò–°–ê–ù–ò–ï –ò–ó –§–ê–ô–õ–ê –ò–õ–ò –°–¢–ê–ù–î–ê–†–¢–ù–û–ï ---
    if exist "changelog_temp.txt" (
        type changelog_temp.txt >> changelog.md
        del changelog_temp.txt
    ) else (
        if defined FIRST_RELEASE (
            echo - –ü–µ—Ä–≤—ã–π —Ä–µ–ª–∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è >> changelog.md
            echo - –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç >> changelog.md
        ) else (
            echo - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ >> changelog.md
            echo - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ >> changelog.md
            echo - –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ >> changelog.md
        )
    )

    echo. >> changelog.md
    echo ## –£—Å—Ç–∞–Ω–æ–≤–∫–∞: >> changelog.md
    echo 1. –°–∫–∞—á–∞–π—Ç–µ ^`PackageGeneratorApp_Setup.exe^` >> changelog.md
    echo 2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ >> changelog.md
    echo 3. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è >> changelog.md

    REM --- –£–î–ê–õ–Ø–ï–ú –§–ê–ô–õ –û–ü–ò–°–ê–ù–ò–Ø –ü–û–°–õ–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø ---
    if exist "update_description.txt" (
        echo –£–¥–∞–ª–µ–Ω–∏–µ update_description.txt –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è...
        del update_description.txt
    )

    gh release create v!NEW_VERSION! "Output\PackageGeneratorApp_Setup.exe" --title "v!NEW_VERSION!" --notes-file changelog.md

    if !errorlevel! neq 0 (
        echo –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ª–∏–∑–∞
        echo –£–±–µ–¥–∏—Å—å, —á—Ç–æ:
        echo 1. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω GitHub CLI: winget install GitHub.cli
        echo 2. –í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥: gh auth login
        echo 3. –¢–æ–∫–µ–Ω –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–æ–≤
    )

    REM --- –û–ß–ò–°–¢–ö–ê ---
    del changelog.md 2>nul
)

echo.
echo ========================================
echo ‚úÖ –†–ï–õ–ò–ó v!NEW_VERSION! –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!
echo ========================================
echo.
if defined FIRST_RELEASE (
    echo üéâ –°–û–ó–î–ê–ù –ü–ï–†–í–´–ô –†–ï–õ–ò–ó!
) else (
    echo –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:
    echo ‚úì –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å !CURRENT_VERSION! –¥–æ !NEW_VERSION!
)
echo ‚úì EXE —Ñ–∞–π–ª —Å–æ–±—Ä–∞–Ω
echo ‚úì –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ —Å–æ–∑–¥–∞–Ω
echo ‚úì –§–∞–π–ª—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã
if defined GIT_ERROR (
    echo ‚ö† –ö–æ–¥ –ù–ï –∑–∞–ø—É—à–µ–Ω –Ω–∞ GitHub (–æ—à–∏–±–∫–∞ Git)
    echo ‚ö† –†–µ–ª–∏–∑ –ù–ï —Å–æ–∑–¥–∞–Ω –Ω–∞ GitHub
) else (
    echo ‚úì –ö–æ–¥ –∑–∞–ø—É—à–µ–Ω –Ω–∞ GitHub
    echo ‚úì –†–µ–ª–∏–∑ —Å–æ–∑–¥–∞–Ω –Ω–∞ GitHub
    echo.
    echo –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ª–∏–∑: https://github.com/!GITHUB_USER!/!GITHUB_REPO!/releases/tag/v!NEW_VERSION!
)
echo.

pause