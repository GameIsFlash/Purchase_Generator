import logging
from pathlib import Path
from collections import defaultdict
from config import ERROR_MESSAGES
from data_reader import DataReader
from excel_generator import ExcelGenerator
import sys

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def generate_purchase_tables(
        images_dir: str,
        database_file: str,
        order_dict: dict,
        output_dir: str = "output"
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –∑–∞–∫—É–ø–∫–∏ –ø–æ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤"""
    generated_files = []
    errors = []

    try:
        if not order_dict:
            errors.append(ERROR_MESSAGES['EMPTY_ORDER'])
            return generated_files, errors

        data_reader = DataReader(database_file, images_dir)
        excel_generator = ExcelGenerator(output_dir)

        if not data_reader.load_database():
            errors.append("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            return generated_files, errors

        suppliers_data = defaultdict(list)

        for article, quantity in order_dict.items():
            try:
                if not isinstance(quantity, int) or quantity <= 0:
                    errors.append(ERROR_MESSAGES['INVALID_QUANTITY'].format(article, quantity))
                    continue

                product_info = data_reader.get_product_info(article)
                if not product_info:
                    errors.append(ERROR_MESSAGES['PRODUCT_NOT_FOUND'].format(article))
                    continue

                processed_image = data_reader.process_image(product_info['article'])

                item_data = {
                    'article': product_info['article'],
                    'name': product_info['name'],
                    'price': product_info['price'],
                    'quantity': quantity,
                    'supplier': product_info['supplier'],
                    'processed_image': processed_image
                }

                suppliers_data[product_info['supplier']].append(item_data)

            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ç–∏–∫—É–ª–∞ {article}: {str(e)}"
                errors.append(error_msg)
                logger.error(error_msg)

        for supplier, items in suppliers_data.items():
            try:
                supplier_data = {
                    'supplier': supplier,
                    'items': items
                }

                file_path = excel_generator.generate_table(supplier_data)
                generated_files.append(file_path)

                logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è {supplier}: {len(items)} –ø–æ–∑–∏—Ü–∏–π")

            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier}: {str(e)}"
                errors.append(error_msg)
                logger.error(error_msg)

        logger.info(f"–ì–æ—Ç–æ–≤–æ. –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(generated_files)}, –æ—à–∏–±–æ–∫: {len(errors)}")

    except Exception as e:
        error_msg = f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        errors.append(error_msg)
        logger.error(error_msg)

    return generated_files, errors


def generate_general_table(
        images_dir: str,
        database_file: str,
        output_dir: str = "output"
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–µ–π —Ç–∞–±–ª–∏—Ü—ã –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î"""
    generated_files = []
    errors = []

    try:
        data_reader = DataReader(database_file, images_dir)
        excel_generator = ExcelGenerator(output_dir)

        if not data_reader.load_database():
            errors.append("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            return generated_files, errors

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        all_products = data_reader.get_all_products()
        if not all_products:
            errors.append("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")
            return generated_files, errors

        suppliers_data = defaultdict(list)

        for product_info in all_products:
            try:
                processed_image = data_reader.process_image(product_info['article'])

                item_data = {
                    'article': product_info['article'],
                    'name': product_info['name'],
                    'price': product_info['price'],
                    'quantity': 1,  # –î–ª—è –æ–±—â–µ–π —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞–≤–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 1
                    'supplier': product_info['supplier'],
                    'processed_image': processed_image
                }

                suppliers_data[product_info['supplier']].append(item_data)

            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {product_info.get('article', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: {str(e)}"
                errors.append(error_msg)
                logger.error(error_msg)

        for supplier, items in suppliers_data.items():
            try:
                supplier_data = {
                    'supplier': supplier,
                    'items': items
                }

                file_path = excel_generator.generate_general_table(supplier_data)
                generated_files.append(file_path)

                logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –æ–±—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è {supplier}: {len(items)} –ø–æ–∑–∏—Ü–∏–π")

            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—â–µ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier}: {str(e)}"
                errors.append(error_msg)
                logger.error(error_msg)

        logger.info(f"–ì–æ—Ç–æ–≤–æ. –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(generated_files)}, –æ—à–∏–±–æ–∫: {len(errors)}")

    except Exception as e:
        error_msg = f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        errors.append(error_msg)
        logger.error(error_msg)

    return generated_files, errors


def choose_mode():
    """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("\n" + "=" * 50)
    print("–ì–ï–ù–ï–†–ê–¢–û–† –¢–ê–ë–õ–ò–¶ –ó–ê–ö–£–ü–ö–ò")
    print("=" * 50)
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
    print("1. –û–±—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ë–î)")
    print("2. –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫—É–ø–∫–∏ –ø–æ –∑–∞–∫–∞–∑—É (–∏–∑ JSON)")
    print("3. –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (GUI)")
    print("=" * 50)

    while True:
        try:
            choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞ (1, 2 –∏–ª–∏ 3): ").strip()
            if choice == "1":
                return "general"
            elif choice == "2":
                return "order"
            elif choice == "3":
                return "gui"
            else:
                print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3")
        except KeyboardInterrupt:
            print("\n\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            exit(0)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    mode = choose_mode()

    if mode == "gui":
        print("\nüñ•Ô∏è  –ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        try:
            from UI import main as gui_main
            gui_main()
        except ImportError:
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –º–æ–¥—É–ª—å UI.py")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª UI.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ GUI: {e}")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
    images_dir = "data/images"
    database_file = "data/table/database.xlsx"
    output_dir = "output"

    if mode == "general":
        print(f"\nüìä –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞: –û–±—â–∞—è —Ç–∞–±–ª–∏—Ü–∞")
        print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database_file}")
        print(f"–ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {images_dir}")
        print(f"–í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {output_dir}")
        print("\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–∏—Ö —Ç–∞–±–ª–∏—Ü...")

        files, errors = generate_general_table(
            images_dir=images_dir,
            database_file=database_file,
            output_dir=output_dir
        )

    elif mode == "order":
        print(f"\nüõí –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞: –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫—É–ø–∫–∏ –ø–æ –∑–∞–∫–∞–∑—É")

        # JSON —Å –∑–∞–∫–∞–∑–æ–º (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –≤–≤–æ–¥)
        order = {
            "vl-cronier-ployka-cr-2018": 10
        }

        print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database_file}")
        print(f"–ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {images_dir}")
        print(f"–í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {output_dir}")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –≤ –∑–∞–∫–∞–∑–µ: {len(order)}")
        print("\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –∑–∞–∫—É–ø–∫–∏...")

        files, errors = generate_purchase_tables(
            images_dir=images_dir,
            database_file=database_file,
            order_dict=order,
            output_dir=output_dir
        )

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
    print(f"\n{'=' * 50}")
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ì–ï–ù–ï–†–ê–¶–ò–ò")
    print(f"{'=' * 50}")

    if files:
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
        for i, file_path in enumerate(files, 1):
            print(f"   {i}. {Path(file_path).name}")
    else:
        print("‚ùå –§–∞–π–ª—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")

    if errors:
        print(f"\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(errors)}")
        for i, error in enumerate(errors, 1):
            print(f"   {i}. {error}")
    else:
        print("\n‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

    print(f"\n{'=' * 50}")
    print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")


if __name__ == "__main__":
    main()